Question A: 
Given an integer array, nums, find the maximum values in all the contiguous subarrays (windows) of size w.

Here the approach is quite good, we make a deque, 
And use it to store the element indices, largest first one, 

And if any elements that comes after it and is smaller we store it, 
if it's bigger we just remove the elements smaller than it, cz they already smaller and also they came before
this current bigger number, so, they will be gone before this number.

So, we keep removing elements which are smaller than current element from the deque from the back.

then we add the current element.

And finally we push the current max element which will be the deque[0]th element to the result.
In js: 

```

export function findMaxSlidingWindow(nums, w) {
    let deque = [];
    let res = [];
    
    for(let i = 0; i< nums.length; i++) {
        
        // first we check if the current element at the back 
        // goes out of bounds and pop until the elements are out
        // of bound of window.
        while(deque.length && deque[0] <= i - w ) {
            deque.shift();
        }
        
        // then we remove all the elements starting from the 
        // back which are smaller than current element
        // because current element is longer lived and will 
        // be greatest of them so, other's are no useful
        while(deque.length && nums[deque[deque.length - 1]] <= nums[i]) {
            deque.pop();
        }
        
        // also we need to push the current element index to deque
        deque.push(i);
        // and if the window is good size like we already compared 
        // w elements then we start puhsing the elements to the result
        // result consists of elements at zero index which are largest
        // always.
        if(i >= (w-1)) {
            res.push(nums[deque[0]]);
        }
    }
    
    return res;
}
```

Question B: 
Merge Intervals -> But considering we need to add one interval in between. And provide final non-overalapping.
array of intervals.

So, it's simple in this case. 
We are given a non-overlapping array of intervals. IF not non-overlapping, we can just make them non-overlappnig.
once sorting and then merge the required intervals. 

once they are non-overalapping, let's focus on our solution. 


We will start from t he first end and keep adding the intervals into our output array until, 

intervals[i][0] < toBeAdded[0]

And then once we are out of loop, 
we are at the position where we need to add the new Interval at, 
But new interval can cause chaos in subsequent intervals as it can be big and overlapping many of the subsequent
intervals. 

So, we have to keep adding intervals with caution now.

We first add the new Intervals with proper checks and then continue on iteration for i, until the end as below.

C++. 
```
vector<vector<int>> InsertInterval(vector<vector<int>> intervals, vector<int> newInterval)
{
    // Replace this placeholder return statement with your code
    // here we just want to insert an interval. 
    // we search through the sorted intervals using binary search wrt first element 
    // of the interval.
    
    vector<vector<int>> res;
    vector<int> curr;
    int i = 0;
    while(i < intervals.size() && intervals[i][0] < newInterval[0]) {
        res.push_back(intervals[i]);
        i++;
    }
    if(res.empty() || newInterval[0] > res.back()[1]) {
        res.push_back(newInterval);
    } else {
        res.back()[1] = max(res.back()[1], newInterval[1]);
    }
    while(i < intervals.size()) {
        curr = intervals[i];
        if(res.empty() || curr[0] > res.back()[1]) {
            res.push_back(curr);
        } else {
            res.back()[1] = max(res.back()[1], curr[1]);
        }
        i++;
    }
    
    return res;
    return {};
}```

So, here we can see how we check if newInterval[0] > res.back()[1] which means there is no overlap,
so we just add the new interval.
otherwise we will need to take max of the both interval ends.

And subsequently while adding other remaining interals we follow the same thing.


Question C: 
Print nth line of Pascal's triagle. Now I realised, we cna't use binomial coefficients expansion to 
actually calculate the nth line in pascal's triangle, due to int storage size constraints, 

The value of $n!$ moves very fast, while value of $nCx$ moves slower, but calculating the value of $nCx$ 
requires factorial calculation which will limit us.

So, better use recursion to calculate the pascal's triagle. 

if 1, [1] we return [1] 

then on subsequent we will have initial array [1], 
and use previous array let's say example previous row is [1, 3, 3, 1]
then we want to calculate the next row. Then we do [1, (1 + 3), (3 + 3), (3 + 1)],

And we append [1] at the end too. 

So, while travelling the previousArray we travel for previousArray.length - 1 times.
JS
```
function getPascalLine(n) {
	if(n == 0) {
		return [1];
	}
	else {
		var line = [1];

		previousLine = getPascalLine(n-1);
		for(var i = 0; i < previousLine.length; i++) {
			line.push(previousLine[i] + previousLine[i+1]);
		}
		line.push(1);
	}
	return line;
}
```
